---
- name: Install Applications and Development Tools
  hosts: localhost
  connection: local
  become: true
  vars:
    original_user: "{{ ansible_env.SUDO_USER }}"

  tasks:
    # Third-party repositories
    - name: Import 1Password GPG key
      ansible.builtin.rpm_key:
        key: https://downloads.1password.com/linux/keys/1password.asc
        state: present

    - name: Add 1Password repository
      ansible.builtin.yum_repository:
        name: 1password
        description: 1Password Stable Channel
        baseurl: https://downloads.1password.com/linux/rpm/stable/$basearch
        enabled: true
        gpgcheck: true
        repo_gpgcheck: true
        gpgkey: https://downloads.1password.com/linux/keys/1password.asc

    - name: Import Google Chrome GPG key
      ansible.builtin.rpm_key:
        key: https://dl.google.com/linux/linux_signing_key.pub
        state: present

    - name: Add Google Chrome repository
      ansible.builtin.yum_repository:
        name: google-chrome
        description: Google Chrome
        baseurl: http://dl.google.com/linux/chrome/rpm/stable/x86_64
        enabled: true
        gpgcheck: true
        gpgkey: https://dl.google.com/linux/linux_signing_key.pub

    - name: Import Microsoft GPG key
      ansible.builtin.rpm_key:
        key: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add Visual Studio Code repository
      ansible.builtin.yum_repository:
        name: vscode
        description: Visual Studio Code
        baseurl: https://packages.microsoft.com/yumrepos/vscode
        enabled: true
        gpgcheck: true
        gpgkey: https://packages.microsoft.com/keys/microsoft.asc

    # Native packages with system integration
    - name: Install desktop applications (native packages)
      ansible.builtin.dnf:
        name:
          - 1password # Password manager (needs system integration)
          - 1password-cli # 1Password CLI for secure credential access
          - google-chrome-stable # Web browser (needs system integration)
          - code # Visual Studio Code (needs system integration)
        state: present

    # Configure 1Password native messaging for Firefox-based browsers
    - name: Create 1Password config directory
      ansible.builtin.file:
        path: "/etc/1password"
        state: directory
        mode: "0755"
        owner: root
        group: root

    - name: Create custom allowed browsers file for 1Password
      ansible.builtin.file:
        path: "/etc/1password/custom_allowed_browsers"
        state: touch
        mode: "0755"
        owner: root
        group: root

    - name: Add Zen Browser to 1Password custom allowed browsers
      ansible.builtin.lineinfile:
        path: "/etc/1password/custom_allowed_browsers"
        line: "{{ item }}"
        state: present
      loop:
        - "zen-bin"
        - "zen"

    - name: Set correct permissions for 1Password custom allowed browsers
      ansible.builtin.file:
        path: "/etc/1password/custom_allowed_browsers"
        mode: "0755"
        owner: root
        group: root

    - name: Display 1Password integration setup instructions
      ansible.builtin.debug:
        msg: "1Password setup complete. CRITICAL: 1) Completely close 1Password app (pkill -f 1password), 2) Restart 1Password, 3) Close Zen Browser, 4) Restart Zen Browser, 5) Install 1Password extension from Firefox Add-ons store."

    # Development tools
    - name: Install development tools
      ansible.builtin.dnf:
        name:
          - vim # Text editor
          - neovim # Modern vim
          - nodejs # JavaScript runtime
          - npm # Node package manager
          - ansible # Automation tool
          - ansible-lint # Ansible linting
          - yamllint # YAML linting
          - gh # GitHub CLI
        state: present

    # Command line utilities
    - name: Install command line utilities
      ansible.builtin.dnf:
        name:
          - jq # JSON processor
          - tree # Directory structure viewer
          - htop # Process monitor
          - btop # Process monitor
          - ripgrep # Fast grep alternative
          - fd-find # Fast find alternative
          - bat # Cat with syntax highlighting
          - fzf # Fuzzy finder
          - zsh # Alternative shell
          - zellij # Terminal multiplexer
          - wl-clipboard # Wayland clipboard utilities (wl-copy, wl-paste)
        state: present

    # GitHub tools (cliphist)
    - name: Get cliphist latest release info
      ansible.builtin.uri:
        url: "https://api.github.com/repos/sentriz/cliphist/releases/latest"
        return_content: true
      register: cliphist_release

    - name: Install cliphist (clipboard history manager for Wayland)
      ansible.builtin.get_url:
        url: "{{ cliphist_release.json.assets | selectattr('name', 'match', '.*linux-amd64') | map(attribute='browser_download_url') | first }}"
        dest: "/tmp/cliphist"
        mode: "0755"
      become: true
      become_user: "{{ original_user }}"
      when: cliphist_release is defined

    - name: Install cliphist binary
      ansible.builtin.copy:
        src: "/tmp/cliphist"
        dest: "/usr/local/bin/cliphist"
        mode: "0755"
        remote_src: true
      when: cliphist_release is defined

    - name: Clean up cliphist installation file
      ansible.builtin.file:
        path: "/tmp/cliphist"
        state: absent
      become: true
      become_user: "{{ original_user }}"
      when: cliphist_release is defined

    # GNOME desktop utilities
    - name: Install GNOME desktop utilities and extensions
      ansible.builtin.dnf:
        name:
          - gnome-shell-extension-dash-to-dock # Dash to Dock extension
          - gnome-tweaks # GNOME appearance and behavior customization
          - gnome-extensions-app # Manage GNOME Shell extensions
          - dconf-editor # Advanced configuration editor
        state: present

    # Containerization tools
    - name: Install containerization tools
      ansible.builtin.dnf:
        name:
          - docker # Container runtime (includes compose)
        state: present

    # Flatpak applications
    - name: Install Flatpak applications
      community.general.flatpak:
        name: "{{ item }}"
        state: present
      become: true
      become_user: "{{ original_user }}"
      loop:
        - com.github.IsmaelMartinez.teams_for_linux # Teams client
        - md.obsidian.Obsidian # Note-taking and knowledge management
        - org.zotero.Zotero # Reference management and research tool
        - org.onlyoffice.desktopeditors # Office suite
        - com.plexamp.Plexamp # Music player for Plex
        - org.gimp.GIMP # GNU Image Manipulation Program
        - io.mpv.Mpv # Modern media player

    - name: Configure Obsidian flatpak permissions for clipboard access
      ansible.builtin.command: flatpak override --user --socket=session-bus md.obsidian.Obsidian
      become: false
      become_user: "{{ original_user }}"
      changed_when: false
      failed_when: false

    - name: Configure Plexamp flatpak permissions for Wayland socket access
      ansible.builtin.command: flatpak override --user --socket=wayland com.plexamp.Plexamp
      become: false
      become_user: "{{ original_user }}"
      changed_when: false
      failed_when: false

    # Remove unwanted packages
    - name: Remove Firefox (replaced with Chrome)
      ansible.builtin.dnf:
        name: firefox
        state: absent

    - name: Remove LibreOffice packages (replaced with OnlyOffice)
      ansible.builtin.dnf:
        name:
          - libreoffice*
          - unoconv
        state: absent
        autoremove: true

    - name: Remove LibreOffice from Flatpak
      community.general.flatpak:
        name: org.libreoffice.LibreOffice
        state: absent
      become: true
      become_user: "{{ original_user }}"
      failed_when: false

    - name: Remove GNOME Terminal (replaced with Alacritty)
      ansible.builtin.dnf:
        name: gnome-terminal
        state: absent

    # GitHub tools (lazydocker)
    - name: Get lazydocker latest release info
      ansible.builtin.uri:
        url: https://api.github.com/repos/jesseduffield/lazydocker/releases/latest
        method: GET
        return_content: true
      register: lazydocker_release

    - name: Install lazydocker (terminal UI for Docker)
      ansible.builtin.get_url:
        url: "{{ lazydocker_release.json.assets | selectattr('name', 'match', '.*Linux_x86_64\\.tar\\.gz$') | map(attribute='browser_download_url') | first }}"
        dest: /tmp/lazydocker.tar.gz
        mode: "0644"
      become: true
      become_user: "{{ original_user }}"
      when: lazydocker_release is defined

    - name: Extract lazydocker
      ansible.builtin.unarchive:
        src: /tmp/lazydocker.tar.gz
        dest: /tmp
        remote_src: true
      become: true
      become_user: "{{ original_user }}"
      when: lazydocker_release is defined

    - name: Install lazydocker binary
      ansible.builtin.copy:
        src: /tmp/lazydocker
        dest: /usr/local/bin/lazydocker
        mode: "0755"
        owner: root
        group: root
        remote_src: true
      when: lazydocker_release is defined

    - name: Clean up lazydocker installation files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/lazydocker.tar.gz
        - /tmp/lazydocker
      become: true
      become_user: "{{ original_user }}"
      when: lazydocker_release is defined

    # GitHub tools (Zen Browser)
    - name: Get Zen Browser latest release info
      ansible.builtin.uri:
        url: https://api.github.com/repos/zen-browser/desktop/releases/latest
        method: GET
        return_content: true
      register: zen_browser_release

    - name: Check if Zen Browser is already installed
      ansible.builtin.stat:
        path: /opt/zen-browser/zen
      register: zen_installed

    - name: Install Zen Browser (privacy-focused Firefox-based browser)
      ansible.builtin.get_url:
        url: "{{ zen_browser_release.json.assets | selectattr('name', 'match', '^zen\\.linux-x86_64\\.tar\\.xz$') | map(attribute='browser_download_url') | first }}"
        dest: /tmp/zen-browser.tar.xz
        mode: "0644"
      become: true
      become_user: "{{ original_user }}"
      when: zen_browser_release is defined and not zen_installed.stat.exists

    - name: Create Zen Browser directory
      ansible.builtin.file:
        path: "/opt/zen-browser"
        state: directory
        mode: "0755"
        owner: root
        group: root
      when: zen_browser_release is defined and not zen_installed.stat.exists

    - name: Extract Zen Browser
      ansible.builtin.unarchive:
        src: /tmp/zen-browser.tar.xz
        dest: /opt/zen-browser
        remote_src: true
        extra_opts: [--strip-components=1]
      when: zen_browser_release is defined and not zen_installed.stat.exists

    - name: Create Zen Browser desktop entry
      ansible.builtin.copy:
        content: |
          [Desktop Entry]
          Version=1.0
          Name=Zen Browser
          Comment=Privacy-focused Firefox-based browser
          GenericName=Web Browser
          Keywords=Internet;WWW;Browser;Web;Explorer
          Exec=/opt/zen-browser/zen %u
          Terminal=false
          X-MultipleArgs=false
          Type=Application
          Icon=/opt/zen-browser/browser/chrome/icons/default/default128.png
          Categories=GNOME;GTK;Network;WebBrowser;
          MimeType=text/html;text/xml;application/xhtml+xml;application/xml;application/rss+xml;application/rdf+xml;image/gif;image/jpeg;image/png;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;x-scheme-handler/chrome;video/webm;application/x-xpinstall;
          StartupNotify=true
        dest: /usr/share/applications/zen-browser.desktop
        mode: "0644"
      when: zen_browser_release is defined and not zen_installed.stat.exists

    - name: Create Zen Browser symlink
      ansible.builtin.file:
        src: /opt/zen-browser/zen
        dest: /usr/local/bin/zen
        state: link
      when: zen_browser_release is defined and not zen_installed.stat.exists

    - name: Clean up Zen Browser installation file
      ansible.builtin.file:
        path: /tmp/zen-browser.tar.xz
        state: absent
      become: true
      become_user: "{{ original_user }}"
      when: zen_browser_release is defined and not zen_installed.stat.exists

    # Rust development environment
    - name: Remove Fedora packaged Rust/Cargo (conflicts with rustup)
      ansible.builtin.dnf:
        name:
          - rust # Fedora's outdated Rust package
          - cargo # Fedora's outdated Cargo package
        state: absent

    - name: Check if rustup is already installed
      ansible.builtin.stat:
        path: "/home/{{ original_user }}/.cargo/bin/rustup"
      register: rustup_installed
      become: false
      become_user: "{{ original_user }}"

    - name: Download rustup installer
      ansible.builtin.get_url:
        url: "https://sh.rustup.rs"
        dest: "/tmp/rustup-init.sh"
        mode: "0755"
      become: false
      become_user: "{{ original_user }}"
      when: not rustup_installed.stat.exists

    - name: Install rustup (official Rust toolchain installer)
      ansible.builtin.command: "/tmp/rustup-init.sh -y --default-toolchain stable"
      args:
        creates: "/home/{{ original_user }}/.cargo/bin/rustup"
      become: false
      become_user: "{{ original_user }}"
      when: not rustup_installed.stat.exists

    - name: Remove rustup installer
      ansible.builtin.file:
        path: "/tmp/rustup-init.sh"
        state: absent
      become: false
      become_user: "{{ original_user }}"

    - name: Add cargo bin to PATH in bashrc
      ansible.builtin.lineinfile:
        path: "/home/{{ original_user }}/.bashrc"
        line: 'export PATH="$HOME/.cargo/bin:$PATH"'
        regexp: '^export PATH=.*\.cargo/bin.*'
        state: present
      become: false
      become_user: "{{ original_user }}"

    - name: Add cargo bin to PATH in zshrc (if exists)
      ansible.builtin.lineinfile:
        path: "/home/{{ original_user }}/.zshrc"
        line: 'export PATH="$HOME/.cargo/bin:$PATH"'
        regexp: '^export PATH=.*\.cargo/bin.*'
        state: present
      become: false
      become_user: "{{ original_user }}"
      failed_when: false

    - name: Install essential Rust components
      ansible.builtin.command: "/home/{{ original_user }}/.cargo/bin/rustup component add clippy rustfmt"
      args:
        creates: "/home/{{ original_user }}/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/clippy-driver"
      environment:
        PATH: "/home/{{ original_user }}/.cargo/bin:{{ ansible_env.PATH }}"
      become: false
      become_user: "{{ original_user }}"
      when: not rustup_installed.stat.exists
