---
- name: Configure Privacy-Focused Browser Settings
  hosts: localhost
  connection: local
  become: true
  vars:
    original_user: "{{ ansible_env.SUDO_USER }}"

  tasks:
    # Install DNS-based ad blocking (better than hosts file)
    - name: Install DNS filtering tools
      ansible.builtin.dnf:
        name:
          - unbound # Local DNS resolver with filtering capability
          - python3-pip # For additional tools
        state: present

    - name: Create unbound configuration directory
      ansible.builtin.file:
        path: /etc/unbound/conf.d
        state: directory
        mode: "0755"

    - name: Configure unbound for ad blocking
      ansible.builtin.copy:
        dest: /etc/unbound/conf.d/adblock.conf
        content: |
          # Ad blocking configuration for unbound
          server:
            # Basic ad blocking domains
            local-zone: "doubleclick.net" redirect
            local-data: "doubleclick.net A 127.0.0.1"
            local-zone: "googleadservices.com" redirect
            local-data: "googleadservices.com A 127.0.0.1"
            local-zone: "googlesyndication.com" redirect
            local-data: "googlesyndication.com A 127.0.0.1"
            local-zone: "facebook.com" redirect
            local-data: "facebook.com A 127.0.0.1"
            local-zone: "fbcdn.net" redirect
            local-data: "fbcdn.net A 127.0.0.1"

            # Privacy-focused settings
            do-not-query-localhost: no
            prefetch: yes
            prefetch-key: yes
        mode: "0644"

    - name: Download and install automated ad block list updater
      ansible.builtin.copy:
        dest: /usr/local/bin/update-adblock
        content: |
          #!/bin/bash
          # Automated ad block list updater for unbound
          BLOCKLIST_URL="https://raw.githubusercontent.com/hagezi/dns-blocklists/main/domains/light.txt"
          UNBOUND_DIR="/etc/unbound/conf.d"
          TEMP_FILE="/tmp/adblock_domains.txt"
          CONFIG_FILE="$UNBOUND_DIR/auto-adblock.conf"

          # Download latest blocklist
          curl -s -o "$TEMP_FILE" "$BLOCKLIST_URL" || exit 1

          # Generate unbound config
          echo "# Auto-generated ad block configuration" > "$CONFIG_FILE"
          echo "# Updated: $(date)" >> "$CONFIG_FILE"
          echo "server:" >> "$CONFIG_FILE"

          # Convert domains to unbound format
          while read -r domain; do
            [[ "$domain" =~ ^[a-zA-Z0-9.-]+$ ]] && echo "    local-zone: \"$domain\" redirect" >> "$CONFIG_FILE"
          done < "$TEMP_FILE"

          # Restart unbound to apply changes
          systemctl restart unbound
          rm -f "$TEMP_FILE"
        mode: "0755"

    - name: Create systemd timer for automatic updates
      ansible.builtin.copy:
        dest: /etc/systemd/system/update-adblock.timer
        content: |
          [Unit]
          Description=Update ad block lists daily

          [Timer]
          OnCalendar=daily
          Persistent=true

          [Install]
          WantedBy=timers.target
        mode: "0644"

    - name: Create systemd service for ad block updates
      ansible.builtin.copy:
        dest: /etc/systemd/system/update-adblock.service
        content: |
          [Unit]
          Description=Update ad blocking lists

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/update-adblock
          User=root
        mode: "0644"

    - name: Enable and start ad block update timer
      ansible.builtin.systemd:
        name: update-adblock.timer
        enabled: true
        state: started
        daemon_reload: true

    - name: Run initial ad block list update
      ansible.builtin.command: /usr/local/bin/update-adblock
      register: adblock_result
      failed_when: false
      changed_when: adblock_result.rc == 0

    # Configure AppArmor profiles (if available)
    - name: Check if AppArmor is available
      ansible.builtin.command: which aa-status
      register: apparmor_check
      failed_when: false
      changed_when: false

    - name: Install AppArmor if available
      ansible.builtin.dnf:
        name:
          - apparmor-utils
          - apparmor-profiles
        state: present
      when: apparmor_check.rc == 0

    - name: Enable AppArmor service
      ansible.builtin.systemd:
        name: apparmor
        state: started
        enabled: true
      when: apparmor_check.rc == 0

    # Disable unnecessary services that could leak information
    - name: Disable telemetry services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        enabled: false
      loop:
        - abrtd # Automatic bug reporting
        - abrt-ccpp # Core dump reporting
      failed_when: false

    # Set privacy-focused systemd journal settings (balance privacy with system maintainability)
    - name: Check if journald.conf exists
      ansible.builtin.stat:
        path: /etc/systemd/journald.conf
      register: journald_conf_exists

    - name: Create journald.conf if it doesn't exist
      ansible.builtin.copy:
        dest: /etc/systemd/journald.conf
        content: |
          # Journal configuration for privacy-focused logging
          [Journal]
        mode: "0644"
      when: not journald_conf_exists.stat.exists

    - name: Configure systemd journal for privacy with reasonable retention
      ansible.builtin.lineinfile:
        path: /etc/systemd/journald.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      loop:
        - { regexp: "^#?Storage=", line: "Storage=persistent" } # Keep logs but limit retention
        - { regexp: "^#?SystemMaxUse=", line: "SystemMaxUse=500M" } # Reasonable size limit
        - { regexp: "^#?MaxRetentionSec=", line: "MaxRetentionSec=1week" } # Only keep 1 week of logs
        - { regexp: "^#?MaxFileSec=", line: "MaxFileSec=1day" } # Rotate daily
        - { regexp: "^#?ForwardToSyslog=", line: "ForwardToSyslog=no" } # Don't duplicate to syslog
      notify: Restart journald

  handlers:
    - name: Restart journald
      ansible.builtin.systemd:
        name: systemd-journald
        state: restarted
