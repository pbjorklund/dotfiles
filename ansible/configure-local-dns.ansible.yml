---
# Ansible playbook for configuring local DNS resolution
# Enables hostname resolution (like 'knuth') via router DNS for all network interfaces
# No hardcoded mappings - uses dynamic router detection

- name: Configure Local DNS Resolution
  hosts: localhost
  become: true
  gather_facts: true
  vars:
    resolved_config_dir: /etc/systemd/resolved.conf.d
    local_dns_config: "{{ resolved_config_dir }}/99-local-dns.conf"

  tasks:
    - name: Get default route
      ansible.builtin.command: ip route show default
      register: default_route_result
      changed_when: false

    - name: Extract router IP from default route
      ansible.builtin.set_fact:
        router_ip: "{{ default_route_result.stdout.split()[2] }}"
      when: default_route_result.stdout | length > 0
      failed_when: default_route_result.stdout | length == 0


    - name: Display detected router IP
      ansible.builtin.debug:
        msg: "Detected router IP: {{ router_ip }}"

    - name: Ensure systemd-resolved config directory exists
      ansible.builtin.file:
        path: "{{ resolved_config_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Check if original resolved.conf exists
      ansible.builtin.stat:
        path: /etc/systemd/resolved.conf
      register: resolved_conf_stat

    - name: Create backup of original resolved.conf
      ansible.builtin.copy:
        src: /etc/systemd/resolved.conf
        dest: "{{ resolved_config_dir }}/00-original.conf.backup"
        remote_src: true
        owner: root
        group: root
        mode: '0644'
        force: false
      when: resolved_conf_stat.stat.exists

    - name: Configure systemd-resolved for local DNS resolution
      ansible.builtin.copy:
        dest: "{{ local_dns_config }}"
        owner: root
        group: root
        mode: '0644'
        content: |
          # Local DNS configuration for hostname resolution
          # Allows resolving local hostnames via router DNS for all network interfaces
          # Auto-detected router: {{ router_ip }}
          # Generated by Ansible on {{ ansible_date_time.iso8601 }}

          [Resolve]
          # Use router as primary DNS, fallback to public DNS for redundancy
          DNS={{ router_ip }} 1.1.1.1 8.8.8.8
          # Search common local domains automatically
          Domains=local ~local ~lan ~home
          # Enable LLMNR for local network discovery (Windows/Linux interop)
          LLMNR=true
          # Enable multicast DNS for .local domain (macOS/Linux interop)
          MulticastDNS=true
          # Cache DNS results for performance
          Cache=true
          # Allow DNS over TLS for external queries
          DNSOverTLS=opportunistic
          # Prevent DHCP from overriding DNS settings
          DNSStubListener=true
          # Use global DNS settings for all interfaces
          FallbackDNS={{ router_ip }} 1.1.1.1 8.8.8.8
      notify: restart_systemd_resolved

    - name: Ensure systemd-resolved service is enabled and started
      ansible.builtin.systemd:
        name: systemd-resolved
        enabled: true
        state: started

  handlers:
    - name: Restart systemd-resolved
      ansible.builtin.systemd:
        name: systemd-resolved
        state: restarted
      listen: restart_systemd_resolved

    - name: Wait for DNS service initialization
      ansible.builtin.pause:
        seconds: 3
      listen: restart_systemd_resolved

    - name: Get DNS status
      ansible.builtin.command: resolvectl status
      register: dns_status_full
      changed_when: false
      failed_when: false
      listen: restart_systemd_resolved

    - name: Extract DNS server information
      ansible.builtin.set_fact:
        dns_status_lines: "{{ dns_status_full.stdout_lines | select('match', '.*(DNS Servers|Current DNS Server).*') | list }}"
      when: dns_status_full.stdout_lines is defined
      listen: restart_systemd_resolved

    - name: Show current DNS configuration
      ansible.builtin.debug:
        msg: "{{ dns_status_lines }}"
      when: dns_status_lines is defined
      listen: restart_systemd_resolved
