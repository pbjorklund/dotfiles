---
- name: Fix DisplayLink Performance Issues
  hosts: localhost
  connection: local
  become: true
  vars:
    original_user: "{{ ansible_env.SUDO_USER }}"

  tasks:
    - name: Create DisplayLink service override directory
      ansible.builtin.file:
        path: /etc/systemd/system/displaylink-driver.service.d
        state: directory
        mode: '0755'

    - name: Copy optimized DisplayLink service override (no CPU limits)
      ansible.builtin.copy:
        src: files/displaylink-override.conf
        dest: /etc/systemd/system/displaylink-driver.service.d/override.conf
        mode: '0644'
        owner: root
        group: root
        backup: true

    - name: Create DisplayLink kernel module parameters for better performance
      ansible.builtin.copy:
        content: |
          # DisplayLink evdi module parameters for better performance
          # Reduce CPU usage by optimizing buffer management
          options evdi initial_device_count=4 loglevel=3
        dest: /etc/modprobe.d/displaylink-evdi.conf
        mode: '0644'
        owner: root
        group: root

    - name: Create DisplayLink environment file for performance tuning
      ansible.builtin.copy:
        content: |
          # DisplayLink environment optimizations
          # Reduce unnecessary operations that cause CPU spikes
          DL_LOG_LEVEL=ERROR
          DL_FORCE_COMPOSITION=0
          DL_DISABLE_CURSOR_PLANE=1
        dest: /etc/displaylink/displaylink.env
        mode: '0644'
        owner: root
        group: root

    - name: Update DisplayLink monitor script with more aggressive restart
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # Monitor DisplayLink CPU usage and restart if it goes crazy
          
          THRESHOLD=200
          SERVICE="displaylink-driver.service"
          CHECK_INTERVAL=30
          
          while true; do
              # Get CPU usage over last 30 seconds
              CPU_USAGE=$(ps -C DisplayLinkManager -o %cpu --no-headers | awk '{sum += $1} END {print sum}')
              
              if [[ -n "$CPU_USAGE" ]] && (( $(echo "$CPU_USAGE > $THRESHOLD" | bc -l) )); then
                  echo "$(date): DisplayLink CPU usage ($CPU_USAGE%) exceeds threshold ($THRESHOLD%), restarting service"
                  systemctl restart "$SERVICE"
                  sleep 60  # Wait longer after restart
              fi
              
              sleep $CHECK_INTERVAL
          done
        dest: /usr/local/bin/displaylink-monitor.sh
        mode: '0755'
        owner: root
        group: root

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Restart DisplayLink driver service
      ansible.builtin.systemd:
        name: displaylink-driver.service
        state: restarted

    - name: Restart DisplayLink monitor service
      ansible.builtin.systemd:
        name: displaylink-monitor.service
        state: restarted

    - name: Get DisplayLink service status
      ansible.builtin.systemd:
        name: displaylink-driver.service
      register: dl_status
      changed_when: false

    - name: Display current status
      ansible.builtin.debug:
        msg: |
          üñ•Ô∏è  DisplayLink Performance Fix Applied:
          
          ‚úÖ CPU quotas removed - full performance restored
          ‚úÖ Kernel module optimized for better buffer management
          ‚úÖ Environment tuned to reduce unnecessary operations
          ‚úÖ Monitoring service updated with higher threshold
          ‚úÖ Service status: {{ dl_status.status.ActiveState }}
          
          Test your displays now - lag should be eliminated!
          Monitor with: watch 'ps aux | grep DisplayLink'
