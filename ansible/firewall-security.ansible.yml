---
- name: Configure Firewall and Security Settings
  hosts: localhost
  connection: local
  become: true
  vars:
    original_user: "{{ ansible_env.SUDO_USER }}"

  tasks:
    # Firewall configuration using firewalld (Fedora default)
    - name: Install security packages
      ansible.builtin.dnf:
        name:
          - firewalld # Fedora's default firewall
          - fail2ban # Intrusion prevention
          - rkhunter # Rootkit hunter
          - clamav # Antivirus
          - clamav-update # ClamAV signature updates
        state: present

    - name: Enable and start firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: started
        enabled: true

    - name: Configure firewalld default zone to drop
      ansible.posix.firewalld:
        zone: public
        state: enabled
        permanent: true
        immediate: true

    - name: Allow SSH through firewall (if needed)
      ansible.posix.firewalld:
        service: ssh
        permanent: true
        state: enabled
        immediate: true
      when: ansible_facts['services']['sshd.service'] is defined

    # Fail2ban configuration
    - name: Configure fail2ban for SSH protection
      ansible.builtin.copy:
        dest: /etc/fail2ban/jail.local
        content: |
          [DEFAULT]
          bantime = 3600
          findtime = 600
          maxretry = 3

          [sshd]
          enabled = true
          port = ssh
          logpath = /var/log/secure
          maxretry = 3
        mode: "0644"
      notify: Restart fail2ban

    - name: Start and enable fail2ban
      ansible.builtin.systemd:
        name: fail2ban
        state: started
        enabled: true
      failed_when: false # Continue if fail2ban service issues

    # Kernel security parameters
    - name: Configure kernel security parameters
      ansible.posix.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        sysctl_file: /etc/sysctl.d/99-security.conf
        reload: true
      loop:
        # Network security
        - { name: "net.ipv4.conf.all.accept_redirects", value: "0" }
        - { name: "net.ipv6.conf.all.accept_redirects", value: "0" }
        - { name: "net.ipv4.conf.all.send_redirects", value: "0" }
        - { name: "net.ipv4.conf.all.accept_source_route", value: "0" }
        - { name: "net.ipv6.conf.all.accept_source_route", value: "0" }
        - { name: "net.ipv4.conf.all.log_martians", value: "1" }
        - { name: "net.ipv4.icmp_echo_ignore_broadcasts", value: "1" }
        - { name: "net.ipv4.icmp_ignore_bogus_error_responses", value: "1" }
        - { name: "net.ipv4.tcp_syncookies", value: "1" }
        # Memory protection
        - { name: "kernel.dmesg_restrict", value: "1" }
        - { name: "kernel.kptr_restrict", value: "2" }
        # ptrace_scope set to 0 to allow SSH agent forwarding in dev containers
        # Note: Setting to 1 breaks 1Password SSH agent forwarding in containers
        - { name: "kernel.yama.ptrace_scope", value: "0" }

    # Secure shared memory
    - name: Secure shared memory
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: "tmpfs /run/shm tmpfs defaults,noexec,nosuid 0 0"
        regexp: '^tmpfs\s+/run/shm'
        state: present

    # SELinux configuration for container development
    - name: Install SELinux management tools
      ansible.builtin.dnf:
        name:
          - policycoreutils-python-utils # SELinux policy management tools
          - setools-console # SELinux policy analysis tools
        state: present

    - name: Check current SELinux status
      ansible.builtin.command: getenforce
      register: selinux_status
      changed_when: false

    - name: Configure SELinux for container development
      ansible.posix.seboolean:
        name: "{{ item }}"
        state: true
        persistent: true
      loop:
        - container_manage_cgroup # Allow containers to manage cgroups
        - virt_use_nfs # Allow containers to access NFS mounts
        - virt_sandbox_use_audit # Allow container sandboxes to use audit
      when: selinux_status.stdout == "Enforcing"

    - name: Set SELinux context for Docker socket to allow dev container access
      community.general.sefcontext:
        target: "/run/docker.sock"
        setype: container_runtime_exec_t
        state: present
        reload: true
      when: selinux_status.stdout == "Enforcing"

    - name: Set SELinux context for 1Password agent socket directory
      community.general.sefcontext:
        target: "/home/{{ original_user }}/.1password(/.*)?"
        setype: user_home_t
        state: present
        reload: true
      when: selinux_status.stdout == "Enforcing"

    - name: Allow containers to access user home directory for SSH agent
      ansible.posix.seboolean:
        name: container_connect_any
        state: true
        persistent: true
      when: selinux_status.stdout == "Enforcing"

    - name: Create SELinux policy module for dev container SSH agent access
      ansible.builtin.copy:
        dest: /tmp/devcontainer_ssh.te
        content: |
          module devcontainer_ssh 1.0;

          require {
                  type container_t;
                  type user_home_t;
                  type ssh_agent_exec_t;
                  class sock_file { read write };
                  class unix_stream_socket { connectto };
                  class file { read };
                  class dir { search };
          }

          # Allow containers to access .1password directory and SSH agent socket
          allow container_t user_home_t:dir search;
          allow container_t user_home_t:sock_file { read write };
          allow container_t ssh_agent_exec_t:unix_stream_socket connectto;
          allow container_t user_home_t:file read;
        mode: "0644"
      when: selinux_status.stdout == "Enforcing"

    - name: Compile and install SELinux policy module for dev containers
      ansible.builtin.shell: |
        cd /tmp
        checkmodule -M -m -o devcontainer_ssh.mod devcontainer_ssh.te
        semodule_package -o devcontainer_ssh.pp -m devcontainer_ssh.mod
        semodule -i devcontainer_ssh.pp
      when: selinux_status.stdout == "Enforcing"
      changed_when: true

    - name: Display SELinux dev container configuration status
      ansible.builtin.debug:
        msg: "SELinux configured for dev container SSH agent access. SELinux status: {{ selinux_status.stdout }}"

    # Update ClamAV signatures
    - name: Update ClamAV virus signatures
      ansible.builtin.command: freshclam
      register: freshclam_result
      failed_when: false
      changed_when: freshclam_result.rc == 0

  handlers:
    - name: Restart fail2ban
      ansible.builtin.systemd:
        name: fail2ban
        state: restarted
