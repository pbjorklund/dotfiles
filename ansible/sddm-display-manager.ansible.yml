---
# SDDM Display Manager Setup for Hyprland
# Installs and configures SDDM with a beautiful dark theme optimized for Hyprland
# Replaces GDM with lightweight, customizable SDDM

- name: SDDM Display Manager Configuration
  hosts: localhost
  become: yes
  vars:
    sddm_theme_name: "hyprland-dark"
    sddm_config_dir: "/etc/sddm.conf.d"
    sddm_themes_dir: "/usr/share/sddm/themes"

  tasks:
    - name: Check if GDM is currently enabled
      systemd:
        name: gdm
      register: gdm_status
      failed_when: false

    - name: Install SDDM and basic themes
      dnf:
        name:
          - sddm
          - sddm-themes
        state: present

    - name: Create SDDM configuration directory
      file:
        path: "{{ sddm_config_dir }}"
        state: directory
        mode: '0755'

    - name: Create custom Hyprland dark theme directory
      file:
        path: "{{ sddm_themes_dir }}/{{ sddm_theme_name }}"
        state: directory
        mode: '0755'

    - name: Create custom SDDM theme QML file
      copy:
        content: |
          import QtQuick 2.0
          import SddmComponents 2.0

          Rectangle {
              id: container
              width: 1920
              height: 1080

              color: "#1e1e2e"  // Catppuccin Mocha base

              property int sessionIndex: session.index

              SessionModel {
                  id: session
                  showNewSessionEntry: true
              }

              UserModel {
                  id: userModel
              }

              // Background
              Rectangle {
                  anchors.fill: parent
                  color: "#11111b"  // Catppuccin Mocha crust
                  
                  Rectangle {
                      anchors.centerIn: parent
                      width: 400
                      height: 300
                      color: "#181825"  // Catppuccin Mocha mantle
                      radius: 10
                      border.color: "#313244"  // Catppuccin Mocha surface0
                      border.width: 1

                      Column {
                          anchors.centerIn: parent
                          spacing: 20

                          Text {
                              anchors.horizontalCenter: parent.horizontalCenter
                              text: "Welcome"
                              font.pixelSize: 28
                              color: "#cdd6f4"  // Catppuccin Mocha text
                              font.bold: true
                          }

                          TextField {
                              id: name
                              width: 300
                              text: userModel.lastUser
                              font.pixelSize: 16
                              placeholderText: "Username"
                              color: "#cdd6f4"
                              
                              KeyNavigation.backtab: rebootButton; KeyNavigation.tab: password

                              Keys.onPressed: {
                                  if (event.key === Qt.Key_Return || event.key === Qt.Key_Enter) {
                                      sddm.login(name.text, password.text, sessionIndex)
                                      event.accepted = true
                                  }
                              }
                          }

                          PasswordField {
                              id: password
                              width: 300
                              font.pixelSize: 16
                              placeholderText: "Password"
                              color: "#cdd6f4"
                              
                              KeyNavigation.backtab: name; KeyNavigation.tab: session

                              Keys.onPressed: {
                                  if (event.key === Qt.Key_Return || event.key === Qt.Key_Enter) {
                                      sddm.login(name.text, password.text, sessionIndex)
                                      event.accepted = true
                                  }
                              }
                          }

                          Row {
                              spacing: 10
                              anchors.horizontalCenter: parent.horizontalCenter

                              Button {
                                  id: session
                                  text: qsTr("Session")
                                  color: "#89b4fa"  // Catppuccin Mocha blue
                                  width: 90
                                  
                                  KeyNavigation.backtab: password; KeyNavigation.tab: loginButton

                                  onClicked: {
                                      if (menu.state === "visible")
                                          menu.state = ""
                                      else
                                          menu.state = "visible"
                                  }
                              }

                              Button {
                                  id: loginButton
                                  text: qsTr("Login")
                                  color: "#a6e3a1"  // Catppuccin Mocha green
                                  width: 90
                                  
                                  KeyNavigation.backtab: session; KeyNavigation.tab: rebootButton

                                  onClicked: sddm.login(name.text, password.text, sessionIndex)
                              }

                              Button {
                                  id: rebootButton
                                  text: qsTr("Reboot")
                                  color: "#f38ba8"  // Catppuccin Mocha red
                                  width: 90
                                  
                                  KeyNavigation.backtab: loginButton; KeyNavigation.tab: name

                                  onClicked: sddm.reboot()
                              }
                          }
                      }
                  }
              }

              Component.onCompleted: {
                  if (name.text === "")
                      name.focus = true
                  else
                      password.focus = true
              }
          }
        dest: "{{ sddm_themes_dir }}/{{ sddm_theme_name }}/Main.qml"
        mode: '0644'

    - name: Create theme metadata file
      copy:
        content: |
          [General]
          Name=Hyprland Dark
          Description=A minimal dark theme for Hyprland users
          Author=Ansible Automation
          Version=1.0
          MainScript=Main.qml
          Type=sddm-theme

          [SddmGreeterTheme]
          Theme-Id=hyprland-dark
          Theme-API=2.0
        dest: "{{ sddm_themes_dir }}/{{ sddm_theme_name }}/metadata.desktop"
        mode: '0644'

    - name: Configure SDDM with Hyprland optimizations
      copy:
        content: |
          [General]
          HaltCommand=/usr/bin/systemctl poweroff
          RebootCommand=/usr/bin/systemctl reboot

          [Theme]
          Current={{ sddm_theme_name }}

          [Wayland]
          SessionDir=/usr/share/wayland-sessions

          [X11]
          SessionDir=/usr/share/xsessions
        dest: "{{ sddm_config_dir }}/hyprland.conf"
        mode: '0644'
      notify: restart sddm

    - name: Disable GDM if currently enabled
      systemd:
        name: gdm
        enabled: no
        state: stopped
      when: gdm_status.status is defined and gdm_status.status.ActiveState == "active"
      failed_when: false

    - name: Enable and start SDDM
      systemd:
        name: sddm
        enabled: yes
        daemon_reload: yes
      notify: restart sddm

  handlers:
    - name: restart sddm
      systemd:
        name: sddm
        state: restarted
      when: ansible_connection != "local" or ansible_env.XDG_SESSION_TYPE != "wayland"
