---
- name: Setup Fedora Workstation
  hosts: localhost
  connection: local
  become: true
  vars:
    user_home: "{{ ansible_env.HOME }}"
    regular_user: "{{ ansible_env.USER }}"
    original_user: "{{ ansible_env.SUDO_USER }}"

  tasks:
    - name: Import 1Password GPG key
      ansible.builtin.rpm_key:
        key: https://downloads.1password.com/linux/keys/1password.asc
        state: present

    - name: Add 1Password repository
      ansible.builtin.yum_repository:
        name: 1password
        description: 1Password Stable Channel
        baseurl: https://downloads.1password.com/linux/rpm/stable/$basearch
        enabled: true
        gpgcheck: true
        repo_gpgcheck: true
        gpgkey: https://downloads.1password.com/linux/keys/1password.asc

    - name: Add Google Chrome repository
      ansible.builtin.yum_repository:
        name: google-chrome
        description: Google Chrome
        baseurl: http://dl.google.com/linux/chrome/rpm/stable/x86_64
        enabled: true
        gpgcheck: true
        gpgkey: https://dl.google.com/linux/linux_signing_key.pub

    - name: Import Google Chrome GPG key
      ansible.builtin.rpm_key:
        key: https://dl.google.com/linux/linux_signing_key.pub
        state: present

    - name: Import Microsoft GPG key
      ansible.builtin.rpm_key:
        key: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add Visual Studio Code repository
      ansible.builtin.yum_repository:
        name: vscode
        description: Visual Studio Code
        baseurl: https://packages.microsoft.com/yumrepos/vscode
        enabled: true
        gpgcheck: true
        gpgkey: https://packages.microsoft.com/keys/microsoft.asc

    - name: Install desktop applications (native packages for integration)
      ansible.builtin.dnf:
        name:
          - 1password # Password manager (needs system integration)
          - google-chrome-stable # Web browser (needs system integration)
          - code # Visual Studio Code (needs system integration)
        state: present

    - name: Install 1Password CLI (for NAS credential management)
      ansible.builtin.dnf:
        name: 1password-cli # 1Password CLI for secure credential access
        state: present

    - name: Install teams-for-linux via Flatpak (unofficial Teams client)
      community.general.flatpak:
        name: com.github.IsmaelMartinez.teams_for_linux
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install Obsidian via Flatpak (note-taking and knowledge management)
      community.general.flatpak:
        name: md.obsidian.Obsidian
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install Zotero via Flatpak (reference management and research tool)
      community.general.flatpak:
        name: org.zotero.Zotero
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install OnlyOffice via Flatpak (office suite for documents, spreadsheets, presentations)
      community.general.flatpak:
        name: org.onlyoffice.desktopeditors
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install Plexamp via Flatpak (music player for Plex media servers)
      community.general.flatpak:
        name: com.plexamp.Plexamp
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install Pika Backup via Flatpak (simple backup tool for GNOME)
      community.general.flatpak:
        name: org.gnome.World.PikaBackup
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install GIMP via Flatpak (GNU Image Manipulation Program)
      community.general.flatpak:
        name: org.gimp.GIMP
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install MPV via Flatpak (modern media player)
      community.general.flatpak:
        name: io.mpv.Mpv
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install development tools
      ansible.builtin.dnf:
        name:
          - git # Version control
          - vim # Text editor
          - neovim # Modern vim
          - tmux # Terminal multiplexer
          - nodejs # JavaScript runtime
          - npm # Node package manager
          - python3-pip # Python package manager
          - python3-psutil # Python system utilities (required for dconf)
          - ansible # Automation tool
          - ansible-lint # Ansible linting
          - yamllint # YAML linting
          - openssh-clients # SSH tools (includes ssh-keygen)
          - gh # GitHub CLI
        state: present

    - name: Install command line utilities
      ansible.builtin.dnf:
        name:
          - curl # HTTP client
          - wget # File downloader
          - jq # JSON processor
          - tree # Directory structure viewer
          - htop # Process monitor
          - ripgrep # Fast grep alternative
          - fd-find # Fast find alternative
          - bat # Cat with syntax highlighting
          - fzf # Fuzzy finder
          - zsh # Alternative shell
          - unzip # Archive extraction
        state: present

    - name: Enable Zellij COPR repository
      ansible.builtin.command:
        cmd: dnf copr enable varlad/zellij -y
      register: copr_result
      changed_when: "'Repository successfully enabled' in copr_result.stdout"
      failed_when: copr_result.rc != 0 and 'already enabled' not in copr_result.stderr

    - name: Install Zellij terminal multiplexer
      ansible.builtin.dnf:
        name: zellij # Modern terminal multiplexer
        state: present

    - name: Install GNOME desktop utilities and extensions
      ansible.builtin.dnf:
        name:
          - gnome-shell-extension-dash-to-dock # Dash to Dock extension
          - gnome-tweaks # GNOME appearance and behavior customization
          - gnome-extensions-app # Manage GNOME Shell extensions
          - dconf-editor # Advanced configuration editor
          - alacritty # GPU-accelerated terminal emulator
        state: present
      tags: terminal_update

    - name: Install containerization tools
      ansible.builtin.dnf:
        name:
          - docker # Container runtime (includes compose)
        state: present

    - name: Get lazydocker latest release info
      ansible.builtin.uri:
        url: https://api.github.com/repos/jesseduffield/lazydocker/releases/latest
        method: GET
        return_content: true
      register: lazydocker_release
      tags: terminal_update

    - name: Install lazydocker (terminal UI for Docker)
      ansible.builtin.get_url:
        url: "{{ lazydocker_release.json.assets | selectattr('name', 'match', '.*Linux_x86_64\\.tar\\.gz$') | map(attribute='browser_download_url') | first }}"
        dest: /tmp/lazydocker.tar.gz
        mode: "0644"
      become: true
      become_user: "{{ original_user }}"
      tags: terminal_update

    - name: Extract lazydocker
      ansible.builtin.unarchive:
        src: /tmp/lazydocker.tar.gz
        dest: /tmp
        remote_src: true
      become: true
      become_user: "{{ original_user }}"
      tags: terminal_update

    - name: Install lazydocker binary
      ansible.builtin.copy:
        src: /tmp/lazydocker
        dest: /usr/local/bin/lazydocker
        mode: "0755"
        owner: root
        group: root
        remote_src: true
      tags: terminal_update

    - name: Clean up lazydocker installation files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/lazydocker.tar.gz
        - /tmp/lazydocker
      become: true
      become_user: "{{ original_user }}"
      tags: terminal_update

    - name: Install DisplayLink build dependencies
      ansible.builtin.dnf:
        name:
          - kernel-devel  # Kernel development headers for building modules
          - kernel-headers  # Kernel headers required for module compilation
          - dkms  # Dynamic Kernel Module Support for automatic rebuilds
          - gcc  # C compiler for building kernel modules
          - make  # Build tool required for compilation
          - wget  # Download tool for getting official driver
        state: present
      tags: displaylink

    - name: Download DisplayLink RPM for Fedora 42
      ansible.builtin.get_url:
        url: https://github.com/displaylink-rpm/displaylink-rpm/releases/download/v6.1.1-1/fedora-42-displaylink-1.14.10-1.github_evdi.x86_64.rpm
        dest: /tmp/fedora-42-displaylink-1.14.10-1.github_evdi.x86_64.rpm
        mode: "0644"
      tags: displaylink

    - name: Install DisplayLink RPM package
      ansible.builtin.dnf:
        name: /tmp/fedora-42-displaylink-1.14.10-1.github_evdi.x86_64.rpm
        state: present
        disable_gpg_check: true
      tags: displaylink

    - name: Clean up DisplayLink RPM file
      ansible.builtin.file:
        path: /tmp/fedora-42-displaylink-1.14.10-1.github_evdi.x86_64.rpm
        state: absent
      tags: displaylink

    - name: Display DisplayLink installation complete message
      ansible.builtin.debug:
        msg: |
          üñ•Ô∏è  DisplayLink Installation Complete

          The DisplayLink driver has been installed successfully.

          Next steps:
          1. Reboot your system: sudo reboot
          2. Connect your DisplayLink device (USB-to-HDMI adapter, dock, etc.)
          3. The display should be detected automatically

          For troubleshooting:
          - Check module loaded: lsmod | grep evdi
          - Check logs: journalctl -b | grep -i displaylink
          - List USB devices: lsusb | grep DisplayLink
          - Verify installation: rpm -qa | grep displaylink
      tags: displaylink

    - name: Install CIFS utilities for SMB mounting
      ansible.builtin.dnf:
        name:
          - cifs-utils # SMB/CIFS mounting utilities
        state: present
      tags: smb_setup

    - name: Create mount directories for NAS shares
      ansible.builtin.file:
        path: "/mnt/{{ item }}"
        state: directory
        mode: "0755"
        owner: root
        group: root
      loop:
        - backups
        - media
        - pictures
      tags: smb_setup

    - name: Test 1Password CLI basic functionality
      ansible.builtin.command:
        cmd: op account list
      register: op_test
      failed_when: false
      changed_when: false
      become: true
      become_user: "{{ original_user }}"
      tags: smb_setup

    - name: Check if knuth item exists in 1Password
      ansible.builtin.command:
        cmd: op item get "knuth" --fields username
      register: op_knuth_check
      failed_when: false
      changed_when: false
      become: true
      become_user: "{{ original_user }}"
      when: op_test.rc == 0
      tags: smb_setup

    - name: Get NAS username from 1Password
      ansible.builtin.command:
        cmd: op item get "knuth" --fields username --reveal
      register: op_username
      failed_when: false
      changed_when: false
      become: true
      become_user: "{{ original_user }}"
      when: op_test.rc == 0 and op_knuth_check.rc == 0
      tags: smb_setup

    - name: Get NAS password from 1Password
      ansible.builtin.command:
        cmd: op item get "knuth" --fields password --reveal
      register: op_password
      failed_when: false
      changed_when: false
      become: true
      become_user: "{{ original_user }}"
      when: op_test.rc == 0 and op_knuth_check.rc == 0
      tags: smb_setup

    - name: Create temporary credentials file for mounting
      ansible.builtin.tempfile:
        state: file
        suffix: .creds
      register: temp_creds
      when: op_test.rc == 0 and op_knuth_check.rc == 0 and op_username.rc == 0 and op_password.rc == 0
      tags: smb_setup

    - name: Write credentials to temp file
      ansible.builtin.copy:
        content: |
          username={{ op_username.stdout }}
          password={{ op_password.stdout }}
        dest: "{{ temp_creds.path }}"
        mode: "0600"
      when: temp_creds is defined
      tags: smb_setup

    - name: Mount NAS shares using credentials file
      ansible.builtin.shell: |
        if ! mountpoint -q "/mnt/{{ item }}"; then
          mount -t cifs "//192.168.1.35/{{ item }}" "/mnt/{{ item }}" \
            -o "credentials={{ temp_creds.path }},uid=$(id -u {{ original_user }}),gid=$(id -g {{ original_user }}),iocharset=utf8,file_mode=0755,dir_mode=0755"
          echo "Mounted {{ item }}"
        else
          echo "{{ item }} already mounted"
        fi
      register: mount_result
      changed_when: "'Mounted' in mount_result.stdout"
      loop:
        - backups
        - media
        - pictures
      when: temp_creds is defined
      tags: smb_setup

    - name: Clean up temporary credentials file
      ansible.builtin.file:
        path: "{{ temp_creds.path }}"
        state: absent
      when: temp_creds is defined
      tags: smb_setup

    - name: Display 1Password CLI setup instructions
      ansible.builtin.debug:
        msg: |
          üîê 1Password CLI Setup Required

          The 1Password CLI needs to be configured to access your credentials.
          Please follow these steps:

          1. Open and unlock the 1Password app
          2. Select your account or collection at the top of the sidebar
          3. Navigate to Settings > Security
          4. Turn on "Unlock using system authentication"
          5. Navigate to Settings > Developer
          6. Select "Integrate with 1Password CLI"

          After completing these steps, test with: op account list
      when: op_test.rc != 0
      tags: smb_setup

    - name: Display knuth item setup instructions
      ansible.builtin.debug:
        msg: |
          üìù Missing 'knuth' Item in 1Password

          Please create a 'knuth' item in 1Password with:
          - Title: knuth
          - Username field: your Synology username
          - Password field: your Synology password

          After creating the item, re-run: ansible-playbook ansible/fedora-workstation.ansible.yml --tags smb_setup
      when: op_test.rc == 0 and op_knuth_check.rc != 0
      tags: smb_setup

    - name: Display successful mount summary
      ansible.builtin.debug:
        msg: |
          ‚úÖ NAS Shares Successfully Mounted

          Available mounts:
          - /mnt/backups ({{ mount_result.results[0].stdout if mount_result.results is defined else 'already mounted' }})
          - /mnt/media ({{ mount_result.results[1].stdout if mount_result.results is defined else 'already mounted' }})
          - /mnt/pictures ({{ mount_result.results[2].stdout if mount_result.results is defined else 'already mounted' }})
      when: temp_creds is defined
      tags: smb_setup

    - name: Remove Firefox
      ansible.builtin.dnf:
        name: firefox
        state: absent

    - name: Remove LibreOffice and related packages (DNF)
      ansible.builtin.dnf:
        name:
          - libreoffice* # Remove all LibreOffice packages
          - unoconv # Document converter that depends on LibreOffice
        state: absent
        autoremove: true

    - name: Remove LibreOffice from Flatpak
      community.general.flatpak:
        name: org.libreoffice.LibreOffice
        state: absent
      become: true
      become_user: "{{ original_user }}"
      register: libreoffice_removal
      failed_when: >
        libreoffice_removal.failed and
        "not installed" not in libreoffice_removal.msg | default("")

    - name: Remove GNOME Terminal (replaced with Alacritty)
      ansible.builtin.dnf:
        name: gnome-terminal
        state: absent
      tags: terminal_update


    - name: Update all packages
      ansible.builtin.dnf:
        name: "*"
        state: present
        update_only: true

    - name: Check if dotfiles directory exists
      ansible.builtin.stat:
        path: "/home/{{ original_user }}/dotfiles"
      register: dotfiles_dir
      become: true
      become_user: "{{ original_user }}"

    - name: Clone repo from GitHub to user home (as regular user)
      ansible.builtin.git:
        repo: https://github.com/pbjorklund/dotfiles.git
        dest: "/home/{{ original_user }}/dotfiles"
        version: master
        update: false
      become: true
      become_user: "{{ original_user }}"
      when: not dotfiles_dir.stat.exists

    - name: Run dotfiles install script to create symlinks
      ansible.builtin.command:
        cmd: ./install.sh
        chdir: "/home/{{ original_user }}/dotfiles"
      become: true
      become_user: "{{ original_user }}"
      register: install_result
      changed_when: "'Creating symlink' in install_result.stdout"

    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ original_user }}"
        groups: docker
        append: true

    - name: Notify user about Docker group configuration
      ansible.builtin.debug:
        msg: |
          ‚úÖ Docker has been configured and user added to docker group.

          ‚ö†Ô∏è  IMPORTANT: You need to log out and log back in for group membership to take effect.
          Until you do this, you'll need to use 'sudo docker' commands.

          After logging back in, 'docker ps' will work without sudo.

    - name: Check if SSH key exists
      ansible.builtin.stat:
        path: "/home/{{ original_user }}/.ssh/id_ed25519"
      register: ssh_key_check
      become: true
      become_user: "{{ original_user }}"

    - name: Generate SSH key pair
      ansible.builtin.command:
        cmd: >-
          ssh-keygen -t ed25519 -f /home/{{ original_user }}/.ssh/id_ed25519
          -N "" -C "{{ original_user }}@{{ ansible_hostname }}"
      become: true
      become_user: "{{ original_user }}"
      when: not ssh_key_check.stat.exists
      changed_when: true

    - name: Set SSH key permissions
      ansible.builtin.file:
        path: "/home/{{ original_user }}/.ssh"
        state: directory
        mode: "0700"
        owner: "{{ original_user }}"
        group: "{{ original_user }}"
      become: true

    - name: Set private key permissions
      ansible.builtin.file:
        path: "/home/{{ original_user }}/.ssh/id_ed25519"
        mode: "0600"
        owner: "{{ original_user }}"
        group: "{{ original_user }}"
      become: true
      when: not ssh_key_check.stat.exists

    - name: Set public key permissions
      ansible.builtin.file:
        path: "/home/{{ original_user }}/.ssh/id_ed25519.pub"
        mode: "0644"
        owner: "{{ original_user }}"
        group: "{{ original_user }}"
      become: true
      when: not ssh_key_check.stat.exists

    - name: Display SSH public key
      ansible.builtin.command:
        cmd: cat /home/{{ original_user }}/.ssh/id_ed25519.pub
      register: ssh_public_key
      become: true
      become_user: "{{ original_user }}"
      when: not ssh_key_check.stat.exists
      changed_when: false

    - name: Show SSH public key for GitHub
      ansible.builtin.debug:
        msg: |
          SSH key generated successfully!
          Add this public key to your GitHub account:
          {{ ssh_public_key.stdout }}
      when: not ssh_key_check.stat.exists

    - name: Enable focus-on-hover in GNOME
      community.general.dconf:
        key: "/org/gnome/desktop/wm/preferences/focus-mode"
        value: "'sloppy'"
      become: true
      become_user: "{{ original_user }}"

    - name: Remap Caps Lock to Ctrl (productivity enhancement)
      community.general.dconf:
        key: "/org/gnome/desktop/input-sources/xkb-options"
        value: "['caps:ctrl_modifier']"
      become: true
      become_user: "{{ original_user }}"

    - name: Enable multiple GNOME extensions
      community.general.dconf:
        key: "/org/gnome/shell/enabled-extensions"
        value: "['dash-to-dock@micxgx.gmail.com', 'appindicatorsupport@rgcjonas.gmail.com']"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure Dash to Dock - disable auto-hide (always visible)
      community.general.dconf:
        key: "/org/gnome/shell/extensions/dash-to-dock/autohide"
        value: "false"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure Dash to Dock - windows above dock
      community.general.dconf:
        key: "/org/gnome/shell/extensions/dash-to-dock/extend-height"
        value: "false"
      become: true
      become_user: "{{ original_user }}"

    - name: Enable night light
      community.general.dconf:
        key: "/org/gnome/settings-daemon/plugins/color/night-light-enabled"
        value: "true"
      become: true
      become_user: "{{ original_user }}"

    - name: Set night light temperature
      community.general.dconf:
        key: "/org/gnome/settings-daemon/plugins/color/night-light-temperature"
        value: "uint32 4000"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure power settings - never suspend on AC
      community.general.dconf:
        key: "/org/gnome/settings-daemon/plugins/power/sleep-inactive-ac-type"
        value: "'nothing'"
      become: true
      become_user: "{{ original_user }}"
