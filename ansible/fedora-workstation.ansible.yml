---
- name: Setup Fedora Workstation
  hosts: localhost
  connection: local
  become: true
  vars:
    user_home: "{{ ansible_env.HOME }}"
    regular_user: "{{ ansible_env.USER }}"
    original_user: "{{ ansible_env.SUDO_USER }}"

  tasks:
    - name: Import 1Password GPG key
      ansible.builtin.rpm_key:
        key: https://downloads.1password.com/linux/keys/1password.asc
        state: present

    - name: Add 1Password repository
      ansible.builtin.yum_repository:
        name: 1password
        description: 1Password Stable Channel
        baseurl: https://downloads.1password.com/linux/rpm/stable/$basearch
        enabled: true
        gpgcheck: true
        repo_gpgcheck: true
        gpgkey: https://downloads.1password.com/linux/keys/1password.asc

    - name: Add Google Chrome repository
      ansible.builtin.yum_repository:
        name: google-chrome
        description: Google Chrome
        baseurl: http://dl.google.com/linux/chrome/rpm/stable/x86_64
        enabled: true
        gpgcheck: true
        gpgkey: https://dl.google.com/linux/linux_signing_key.pub

    - name: Import Google Chrome GPG key
      ansible.builtin.rpm_key:
        key: https://dl.google.com/linux/linux_signing_key.pub
        state: present

    - name: Import Microsoft GPG key
      ansible.builtin.rpm_key:
        key: https://packages.microsoft.com/keys/microsoft.asc
        state: present

    - name: Add Visual Studio Code repository
      ansible.builtin.yum_repository:
        name: vscode
        description: Visual Studio Code
        baseurl: https://packages.microsoft.com/yumrepos/vscode
        enabled: true
        gpgcheck: true
        gpgkey: https://packages.microsoft.com/keys/microsoft.asc

    - name: Install desktop applications (native packages for integration)
      ansible.builtin.dnf:
        name:
          - 1password # Password manager (needs system integration)
          - google-chrome-stable # Web browser (needs system integration)
          - code # Visual Studio Code (needs system integration)
        state: present

    - name: Install teams-for-linux via Flatpak (unofficial Teams client)
      community.general.flatpak:
        name: com.github.IsmaelMartinez.teams_for_linux
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install Obsidian via Flatpak (note-taking and knowledge management)
      community.general.flatpak:
        name: md.obsidian.Obsidian
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install Zotero via Flatpak (reference management and research tool)
      community.general.flatpak:
        name: org.zotero.Zotero
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install OnlyOffice via Flatpak (office suite for documents, spreadsheets, presentations)
      community.general.flatpak:
        name: org.onlyoffice.desktopeditors
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install Plexamp via Flatpak (music player for Plex media servers)
      community.general.flatpak:
        name: com.plexamp.Plexamp
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install Pika Backup via Flatpak (simple backup tool for GNOME)
      community.general.flatpak:
        name: org.gnome.World.PikaBackup
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install GIMP via Flatpak (GNU Image Manipulation Program)
      community.general.flatpak:
        name: org.gimp.GIMP
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install MPV via Flatpak (modern media player)
      community.general.flatpak:
        name: io.mpv.Mpv
        state: present
      become: true
      become_user: "{{ original_user }}"

    - name: Install development tools
      ansible.builtin.dnf:
        name:
          - git # Version control
          - vim # Text editor
          - neovim # Modern vim
          - tmux # Terminal multiplexer
          - nodejs # JavaScript runtime
          - npm # Node package manager
          - python3-pip # Python package manager
          - python3-psutil # Python system utilities (required for dconf)
          - ansible # Automation tool
          - ansible-lint # Ansible linting
          - yamllint # YAML linting
          - openssh-clients # SSH tools (includes ssh-keygen)
          - gh # GitHub CLI
        state: present

    - name: Install command line utilities
      ansible.builtin.dnf:
        name:
          - curl # HTTP client
          - wget # File downloader
          - jq # JSON processor
          - tree # Directory structure viewer
          - htop # Process monitor
          - ripgrep # Fast grep alternative
          - fd-find # Fast find alternative
          - bat # Cat with syntax highlighting
          - fzf # Fuzzy finder
          - zsh # Alternative shell
          - unzip # Archive extraction
        state: present

    - name: Install GNOME desktop utilities and extensions
      ansible.builtin.dnf:
        name:
          - gnome-shell-extension-dash-to-dock # Dash to Dock extension
          - gnome-tweaks # GNOME appearance and behavior customization
          - gnome-extensions-app # Manage GNOME Shell extensions
          - dconf-editor # Advanced configuration editor
        state: present

    - name: Install GNOME extensions from repositories
      ansible.builtin.dnf:
        name:
          - gnome-shell-extension-appindicator # App indicators support for notifications
        state: present
        enablerepo: "*"

    - name: Install containerization tools
      ansible.builtin.dnf:
        name:
          - docker # Container runtime (includes compose)
        state: present

    - name: Remove Firefox
      ansible.builtin.dnf:
        name: firefox
        state: absent

    - name: Remove LibreOffice and related packages (DNF)
      ansible.builtin.dnf:
        name:
          - libreoffice* # Remove all LibreOffice packages
          - unoconv # Document converter that depends on LibreOffice
        state: absent
        autoremove: true


    - name: Remove LibreOffice from Flatpak
      community.general.flatpak:
        name: org.libreoffice.LibreOffice
        state: absent
      become: true
      become_user: "{{ original_user }}"
      register: libreoffice_removal
      failed_when: >
        libreoffice_removal.failed and
        "not installed" not in libreoffice_removal.msg | default("")

    - name: Update all packages
      ansible.builtin.dnf:
        name: "*"
        state: present
        update_only: true

    - name: Check if dotfiles directory exists
      ansible.builtin.stat:
        path: "/home/{{ original_user }}/dotfiles"
      register: dotfiles_dir
      become: true
      become_user: "{{ original_user }}"

    - name: Clone repo from GitHub to user home (as regular user)
      ansible.builtin.git:
        repo: https://github.com/pbjorklund/dotfiles.git
        dest: "/home/{{ original_user }}/dotfiles"
        version: master
        update: false
      become: true
      become_user: "{{ original_user }}"
      when: not dotfiles_dir.stat.exists

    - name: Run dotfiles install script to create symlinks
      ansible.builtin.command:
        cmd: ./install.sh
        chdir: "/home/{{ original_user }}/dotfiles"
      become: true
      become_user: "{{ original_user }}"
      register: install_result
      changed_when: "'Creating symlink' in install_result.stdout"

    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ original_user }}"
        groups: docker
        append: true

    - name: Notify user about Docker group configuration
      ansible.builtin.debug:
        msg: |
          ✅ Docker has been configured and user added to docker group.

          ⚠️  IMPORTANT: You need to log out and log back in for group membership to take effect.
          Until you do this, you'll need to use 'sudo docker' commands.

          After logging back in, 'docker ps' will work without sudo.

    - name: Check if SSH key exists
      ansible.builtin.stat:
        path: "/home/{{ original_user }}/.ssh/id_ed25519"
      register: ssh_key_check
      become: true
      become_user: "{{ original_user }}"

    - name: Generate SSH key pair
      ansible.builtin.command:
        cmd: >-
          ssh-keygen -t ed25519 -f /home/{{ original_user }}/.ssh/id_ed25519
          -N "" -C "{{ original_user }}@{{ ansible_hostname }}"
      become: true
      become_user: "{{ original_user }}"
      when: not ssh_key_check.stat.exists
      changed_when: true

    - name: Set SSH key permissions
      ansible.builtin.file:
        path: "/home/{{ original_user }}/.ssh"
        state: directory
        mode: "0700"
        owner: "{{ original_user }}"
        group: "{{ original_user }}"
      become: true

    - name: Set private key permissions
      ansible.builtin.file:
        path: "/home/{{ original_user }}/.ssh/id_ed25519"
        mode: "0600"
        owner: "{{ original_user }}"
        group: "{{ original_user }}"
      become: true
      when: not ssh_key_check.stat.exists

    - name: Set public key permissions
      ansible.builtin.file:
        path: "/home/{{ original_user }}/.ssh/id_ed25519.pub"
        mode: "0644"
        owner: "{{ original_user }}"
        group: "{{ original_user }}"
      become: true
      when: not ssh_key_check.stat.exists

    - name: Display SSH public key
      ansible.builtin.command:
        cmd: cat /home/{{ original_user }}/.ssh/id_ed25519.pub
      register: ssh_public_key
      become: true
      become_user: "{{ original_user }}"
      when: not ssh_key_check.stat.exists
      changed_when: false

    - name: Show SSH public key for GitHub
      ansible.builtin.debug:
        msg: |
          SSH key generated successfully!
          Add this public key to your GitHub account:
          {{ ssh_public_key.stdout }}
      when: not ssh_key_check.stat.exists

    - name: Enable focus-on-hover in GNOME
      community.general.dconf:
        key: "/org/gnome/desktop/wm/preferences/focus-mode"
        value: "'sloppy'"
      become: true
      become_user: "{{ original_user }}"

    - name: Remap Caps Lock to Ctrl (productivity enhancement)
      community.general.dconf:
        key: "/org/gnome/desktop/input-sources/xkb-options"
        value: "['caps:ctrl_modifier']"
      become: true
      become_user: "{{ original_user }}"

    # GNOME Desktop Configuration Section
    - name: Enable multiple GNOME extensions
      community.general.dconf:
        key: "/org/gnome/shell/enabled-extensions"
        value: >-
          ['dash-to-dock@micxgx.gmail.com',
           'appindicatorsupport@rgcjonas.gmail.com',
           'system-monitor@paradoxxx.zero.gmail.com']
      become: true
      become_user: "{{ original_user }}"

    - name: Configure Dash to Dock - position at bottom (macOS style)
      community.general.dconf:
        key: "/org/gnome/shell/extensions/dash-to-dock/dock-position"
        value: "'BOTTOM'"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure Dash to Dock - fixed dock (macOS style)
      community.general.dconf:
        key: "/org/gnome/shell/extensions/dash-to-dock/dock-fixed"
        value: "true"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure Dash to Dock - disable auto-hide (always visible)
      community.general.dconf:
        key: "/org/gnome/shell/extensions/dash-to-dock/autohide"
        value: "false"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure Dash to Dock - windows above dock
      community.general.dconf:
        key: "/org/gnome/shell/extensions/dash-to-dock/extend-height"
        value: "false"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure Dash to Dock - show trash (macOS style)
      community.general.dconf:
        key: "/org/gnome/shell/extensions/dash-to-dock/show-trash"
        value: "true"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure Dash to Dock - show mounts (macOS style)
      community.general.dconf:
        key: "/org/gnome/shell/extensions/dash-to-dock/show-mounts"
        value: "true"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure Dash to Dock - icon size (macOS style)
      community.general.dconf:
        key: "/org/gnome/shell/extensions/dash-to-dock/dash-max-icon-size"
        value: "48"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure Dash to Dock - running indicator style (macOS style)
      community.general.dconf:
        key: "/org/gnome/shell/extensions/dash-to-dock/running-indicator-style"
        value: "'DOTS'"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure Dash to Dock - transparency mode (macOS style)
      community.general.dconf:
        key: "/org/gnome/shell/extensions/dash-to-dock/transparency-mode"
        value: "'DYNAMIC'"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure Dash to Dock - hide applications button (macOS style)
      community.general.dconf:
        key: "/org/gnome/shell/extensions/dash-to-dock/show-show-apps-button"
        value: "false"
      become: true
      become_user: "{{ original_user }}"

    - name: Enable night light
      community.general.dconf:
        key: "/org/gnome/settings-daemon/plugins/color/night-light-enabled"
        value: "true"
      become: true
      become_user: "{{ original_user }}"

    - name: Set night light temperature
      community.general.dconf:
        key: "/org/gnome/settings-daemon/plugins/color/night-light-temperature"
        value: "uint32 4000"
      become: true
      become_user: "{{ original_user }}"

    - name: Configure power settings - never suspend on AC
      community.general.dconf:
        key: "/org/gnome/settings-daemon/plugins/power/sleep-inactive-ac-type"
        value: "'nothing'"
      become: true
      become_user: "{{ original_user }}"

    - name: Final notification about system setup
      ansible.builtin.debug:
        msg: |
          🎉 Fedora Workstation setup completed successfully!

          ✅ Security features enabled:
          - Automatic security updates configured
          - Firewall enabled with SSH/HTTP/HTTPS access
          - Fail2ban protection active
          - SELinux in enforcing mode

          ✅ Performance optimizations applied:
          - SSD TRIM scheduler enabled
          - Memory management tuned
          - I/O performance optimized

          ✅ Applications installed:
          - Development tools: Git, VS Code, Docker, Node.js
          - Desktop apps: Chrome, 1Password, Teams, Obsidian
          - Media tools: MPV, GIMP, Plexamp
          - Backup: Pika Backup

          ⚠️  Remember to:
          1. Log out and back in for Docker group changes
          2. Add SSH key to GitHub: ssh-add ~/.ssh/id_ed25519
          3. Configure Pika Backup for your backup needs
          4. Review GNOME extensions and customize as needed
